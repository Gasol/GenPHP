{"name":"Genphp","tagline":"A Powerful,Flexible Code Generator for PHP5.3, can generate anything what you want for your project.","body":"GenPHP\r\n======\r\nGenPHP is a powerful, flexible PHP code/project generator,\r\nwhich helps you avoid repeating jobs.\r\n\r\nGenPHP can generate anything you defined in the flavor, \r\nIn the generator class, you can use the simple generator API to generate your code.\r\n\r\nBy using GenPHP, you can also seperate your global generator (`~/.genphp/flavors`), project-scope generator (`./flavors`).\r\n\r\nGenPHP is using Twig template engine from Symfony.\r\n\r\n\r\n[![Build Status](https://secure.travis-ci.org/c9s/GenPHP.png)](http://travis-ci.org/c9s/GenPHP)\r\n\r\n![](https://github.com/c9s/GenPHP/raw/master/screenshots/screenshot01.png)\r\n\r\nRequirements\r\n------------\r\n- PHP5.3\r\n\r\nInstallation\r\n------------\r\nCopy this line to install genphp:\r\n\r\n    $ curl https://raw.github.com/c9s/GenPHP/master/scripts/install.sh | bash\r\n\r\nInstall built-in flavors\r\n------------------------\r\n\r\n    $ git clone https://github.com/c9s/GenPHP-Flavors ~/.genphp/flavors\r\n\r\n## Usage\r\n\r\nAfter installation, you can run `list` command to list your flavors, \r\nYou can put your flavor (generator) in global flavor path (`~/.genphp/flavors`) or \r\nyour current project flavor path (`./flavors` or `./.flavors`), for example:\r\n\r\n    ~GenPHP $ genphp list\r\n\r\n    Available flavors:\r\n        command     flavors\r\n        flavor      flavors\r\n        operation   flavors\r\n        phpunit     flavors\r\n        project     flavors\r\n        flavor      /Users/c9s/.genphp/flavors\r\n        phpunit     /Users/c9s/.genphp/flavors\r\n\r\n\r\n\r\n### Creating New Flavors\r\n\r\nThe concept of GenPHP is pretty simple, when you run `genphp new`, it first initialize a flavor loader,\r\nthen use the flavor loader to look up matched flavor from several locations.\r\n\r\nThe loaded flavor instance initializes a generator (which can be GenericGenerator, or BaseGenerator) to generate the stuff\r\nfrom the flavor resource directory to the destination directory. your\r\ngenerator class works between the flavor resource directory and the destination\r\ndirectory.\r\n\r\n\r\n#### Creating Flavor\r\n\r\nTo create your flavor from your codebase in your project, type:\r\n\r\n    $ cd your_project\r\n    $ mkdir flavors\r\n    $ genphp new flavor foo ~/path/to/codebase\r\n\r\n    Loading flavor...\r\n    Inializing option specs...\r\n    Running generator...\r\n        create        flavors/foo/Resource\r\n        create        flavors/foo/Resource/file1\r\n        create        flavors/foo/Resource/file2\r\n        create        flavors/foo/Resource/file3\r\n    Done\r\n\r\nYou can see those created files files here, it's using GenericGenerator to copy\r\n`flavors/foo/Resource` to current directory.\r\n\r\nNow you can put your own files (used by generator) into the `Resource` directory.\r\n\r\n\r\n#### Customizing Your Flavor and Generator\r\n\r\nFor more complex usage, to create your own generator, just run:\r\n\r\n    $ genphp new flavor foo\r\n\r\n    Loading flavor...\r\n    Inializing option specs...\r\n    Running generator...\r\n        create        flavors/foo/Resource\r\n        render        flavors/foo/Generator.php\r\n    Done\r\n\r\nCreate new flavor without codebase path, then open the `Generator.php` file, write your\r\ngenerator actions in the `generate` function.\r\n\r\n```php\r\nclass Generator {\r\n\r\n    public function brief() { return 'your generator brief'; }\r\n\r\n    public function generate($argument1,$argument2) \r\n    {\r\n        // do your operations here\r\n        $this->copyDir('etc','etc');  \r\n    }\r\n}\r\n```\r\n\r\nPut your favorite files into `flavors/foo/Resource`, then you can write operation code in PHP.\r\n\r\n#### Testing Your Flavor\r\n\r\nOnce you have done, You can run `new` command to generate your flavor:\r\n\r\n    $ genphp new foo argument1 argument2\r\n\r\nAnd your code is generated.\r\n\r\nIf you want your flavor be global (system-wide), you can run install command:\r\n\r\n    $ genphp install flavors/foo\r\n\r\nThis installs flavor to your global flavor path.\r\n\r\n\r\n### Using Operation\r\n\r\nGenPHP provides a lot of useful operations for you to write generation tasks very easily.\r\n\r\n#### CopyOperation\r\n\r\nTo copy directory recursively from flavors/foo/Resource/from/path to to/path\r\n\r\n```php\r\n$this->copyDir('from/path','to/path');  \r\n```\r\n\r\n#### TouchOperation\r\n\r\nTo touch a file\r\n\r\n```php\r\n$this->touch('path/to/touch');          \r\n```\r\n\r\n#### CreateOperation\r\n\r\nTo create a new file with content\r\n\r\n```php\r\n$this->create('path/to/file', 'file content' );         \r\n```\r\n\r\n#### CopyOperation\r\n\r\nTo copy a file, copy path/file1 from Resource dir to file2\r\n\r\n```php\r\n$this->copy( 'path/file1' , 'file2' );\r\n```\r\n\r\n#### CreateDirOperation\r\n\r\nTo create a directory:\r\n\r\n```php\r\n$this->createDir( 'path/to/directory' );\r\n```\r\n\r\n#### RenderOperation\r\n\r\nTo load templateName.php.twig template from flavors/foo/Resource \r\nand render the code template with variables to a file:\r\n\r\n```php\r\n$this->render('templateName.php.twig','path/to/file', array(\r\n    'className' => $className\r\n));\r\n```\r\n\r\n#### WriteJsonOperation\r\n\r\nTo write a json file\r\n\r\n```php\r\n$this->writeJson('file.json', array( 'name' => 'John' ) );  // executes WriteJsonOperation\r\n```\r\n\r\n#### WriteYamlOperation\r\n\r\nTo write a yaml file\r\n\r\n```php\r\n$this->writeYaml('file.yaml', array( 'name' => 'John' ) );  // executes WriteJsonOperation\r\n```\r\n\r\n#### GitCloneOperation\r\n\r\nTo clone/pull a git repository:\r\n```php\r\n$this->gitClone( 'git@github.com:.....git' , 'path/to/repo' );\r\n```\r\n\r\n#### HgCloneOperation\r\n\r\nTo clone/pull a hg repository:\r\n```php\r\n$this->hgClone( 'hg uri' , 'path/to/repo' );\r\n```\r\n\r\n\r\nCommand Usage\r\n-------------\r\n\r\nTo generate a generic PHP project structure, GenPHP provides a built-in\r\ntemplate for this:\r\n\r\n```bash\r\n$ genphp new project Foo\r\n\r\n    create\r\n    create      src\r\n    create      src/Foo.php\r\n    create      src/Foo\r\n    dependency ant\r\n    create      build.xml\r\n    dependency phpunit\r\n    create      phpunit.xml.dist\r\n    create      tests\r\n```\r\n\r\ngenphp looks for flavor in `./flavors`, `./.flavors`, `~/.genphp/flavors`, you \r\ncan define your generator in those paths.\r\n\r\nto generate a new flavor:\r\n\r\n```bash\r\n$ genphp new flavor flavorName\r\n```\r\n\r\nTo generate a new flavor from current existing code base:\r\n\r\n```bash\r\n$ genphp new flavor ProjectA ~/path/to/OneProject\r\n```\r\n\r\nTo list schemas\r\n\r\n```bash\r\n$ genphp list\r\n```\r\n\r\nplease check `./flavors` directory of this repository\r\nfor more details.\r\n\r\n## Flavor API\r\n\r\n```php\r\n$path = $flavor->path( 'license' );\r\n\r\n```\r\n\r\n\r\n## Generator Runner\r\n\r\n```php\r\n$loader = new \\Flavor\\FlavorLoader;\r\n$flavor = $loader->load( $flavorName );\r\n$generator = $flavor->getGenerator();\r\n$generator->setLogger( $this->getLogger() );\r\n\r\n$args = func_get_args();\r\narray_shift($args);\r\n\r\n$runner = new \\GenPHP\\GeneratorRunner;\r\n$runner->logger = $logger;\r\n$runner->run($generator,$args);\r\n```\r\n\r\n\r\n## Generator API\r\n\r\n```php\r\npublic fucntion generate($argument1,$argument2, ... ) \r\n{\r\n    $file = $this->flavorLoader->load('license')->path('LICENSE.GPL2');\r\n    $this->copy($file, 'LICENSE' );\r\n    $this->copyDir( );\r\n}\r\n```\r\n\r\n### Operations\r\nBy using built-in operations, you can create your code generator very easily,\r\nfor example, the built-in flavor code generator from GenPHP:\r\n\r\n```php\r\nnamespace flavor;\r\nuse GenPHP\\Flavor\\BaseGenerator;\r\nuse GenPHP\\Path;\r\n\r\nclass Generator extends BaseGenerator\r\n{\r\n    public function brief() { \r\n        return \"Default Flavor\";\r\n    }\r\n\r\n    public function generate($name)\r\n    {\r\n        $paths = Path::get_flavor_paths();\r\n        foreach( $paths as $path ) {\r\n            if( file_exists($path) ) {\r\n                $base = $path . DIRECTORY_SEPARATOR . $name;\r\n                $this->createDir( $base . DIRECTORY_SEPARATOR . \"Resource\");\r\n                $this->render( 'Generator.php.twig',  \r\n                    $base . DIRECTORY_SEPARATOR . 'Generator.php', \r\n                    array( 'name' => $name ) );\r\n            }\r\n        }\r\n        \r\n    }\r\n}\r\n```\r\n\r\nOperation name magic:\r\n\r\n```php\r\n// executes CopyDirOperation\r\n$this->copyDir('from/path','to/path');  \r\n\r\n// executes TouchOperation\r\n$this->touch('path/to/touch');          \r\n\r\n// executes TouchOperation\r\n$this->create('path/to/file', 'file content' );         \r\n\r\n// executes RenderOperation\r\n$this->render('templateName.php.twig','path/to/file', array(\r\n    'className' => $className\r\n));\r\n\r\n// executes WriteJsonOperation\r\n$this->writeJson('file.json', array( ... ) );  // executes WriteJsonOperation\r\n```\r\n\r\nGenPHP supports many operations:\r\n\r\n- CopyDirOperation\r\n- CopyOperation\r\n- CreateDirOperation\r\n- CreateOperation\r\n- RenderOperation\r\n- TouchOperation\r\n- WriteJsonOperation\r\n- WriteYamlOperation\r\n\r\n## Development\r\n\r\n- Fork this probject on GitHub\r\n- Git clone it:\r\n\r\n    $ git clone git@github.com:{{ your Id }}/GenPHP.git\r\n\r\n- Install onion <http://github.com/c9s/Onion>\r\n- run `onion bundle` to install PEAR dependencies.\r\n- run `scripts/genphp` to test your genphp script.\r\n- run `phpunit` to run the test suites.\r\n- run `scripts/compile.sh` to compile whole library into a executable phar file.\r\n\r\n### Create New Opeartion\r\n\r\nThere is a flavor for creating new opeartion already, just run:\r\n\r\n    $ ./scripts/genphp new operation DoSomething\r\n\r\n### Create New Flavor\r\n\r\n    $ ./scripts/genphp new flavor flavor_name\r\n\r\n\r\n### IRC\r\n\r\nJoin us on irc channel: #genphp on irc.freenode.net\r\n\r\n## Reference\r\n* newgem: http://newgem.rubyforge.org/\r\n* Rails: http://guides.rubyonrails.org/command\\_line.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}